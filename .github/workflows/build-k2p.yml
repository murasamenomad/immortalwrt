#
# GitHub Actions: 最终执行版 (纯官方源 + 内建工具正确索引)
#
name: Build ImmortalWrt for K2P (Final Official-Only Build)

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: master
  CONFIG_FILE: .config

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize build environment
      run: |
        # 我们绝不从外部安装 apk-tools
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get update
        sudo -E apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync libcrypt-dev python3-netifaces
        sudo -E apt-get autoremove --purge -y
        sudo -E apt-get clean

    - name: Clone ImmortalWrt source
      run: |
        # 只克隆主源码，不添加任何第三方源
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
        
    - name: Cache downloaded sources (dl)
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-dl-${{ env.REPO_BRANCH }}-${{ hashFiles('openwrt/feeds.conf.default') }}

    - name: Update, install feeds and apply configuration
      run: |
        export TERM=dumb
        cd openwrt
        # 只更新和安装官方自带的 feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp ../.config .config
        # 应用硬件修改
        sed -i 's/reg = <0xa0000 0xf60000>;/reg = <0xa0000 0x1f60000>;/' target/linux/ramips/dts/mt7621_phicomm_k2p.dts
        sed -i 's/IMAGE_SIZE := 15744k/IMAGE_SIZE := 32160k/' target/linux/ramips/image/mt7621.mk
        make defconfig

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc) V=s 2>&1 | tee build.log || (cat build.log && exit 1)
        
    - name: Create and Index Package Repository
      run: |
        # 定义工具和密钥的路径变量
        APK_TOOL=$(pwd)/openwrt/staging_dir/host/bin/apk
        KEY_DIR=$(pwd)/openwrt/keys
        PRIVATE_KEY=$KEY_DIR/key-build.apk.pem
        PUBLIC_KEY=$KEY_DIR/key-build.apk.pub
        
        # 检查密钥是否存在
        if [ ! -f "$PRIVATE_KEY" ]; then
          echo "错误: 签名私钥 $PRIVATE_KEY 未找到! 将尝试使用后备密钥名..."
          # 兼容旧版构建系统可能生成的RSA密钥名作为后备
          PRIVATE_KEY=$KEY_DIR/key-build
          PUBLIC_KEY=$KEY_DIR/key-build.pub
          if [ ! -f "$PRIVATE_KEY" ]; then
            echo "错误: 后备签名私钥 $PRIVATE_KEY 也未找到! 索引将不被签名。"
            # 如果连后备密钥都找不到，我们将只创建未签名的索引
            SIGNING_KEY_PARAM=""
          else
            echo "警告: 使用旧版私钥 $PRIVATE_KEY"
            SIGNING_KEY_PARAM="-k $PRIVATE_KEY"
          fi
        else
          echo "签名密钥检查通过: $PRIVATE_KEY"
          SIGNING_KEY_PARAM="-k $PRIVATE_KEY"
        fi

        # 创建并整合软件包到一个统一目录
        UNIFIED_REPO_DIR=$(pwd)/openwrt/bin/unified_repo
        mkdir -p $UNIFIED_REPO_DIR
        echo "正在整合所有 .apk 软件包..."
        find openwrt/bin/packages/mipsel_24kc -name "*.apk" -exec cp -t $UNIFIED_REPO_DIR/ {} +
        find openwrt/bin/targets/ramips/mt7621/packages -name "*.apk" -exec cp -t $UNIFIED_REPO_DIR/ {} +
        
        # 生成并签署主软件包索引
        echo "正在生成并签署主软件包索引..."
        cd $UNIFIED_REPO_DIR
        $APK_TOOL index -o APKINDEX.tar.gz $SIGNING_KEY_PARAM --allow-untrusted *.apk

        # 将公钥也复制到仓库中
        if [ -f "$PUBLIC_KEY" ]; then
            echo "正在将公钥添加到仓库中..."
            cp "$PUBLIC_KEY" $UNIFIED_REPO_DIR/
        fi

    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: immortalwrt-build-artifacts-${{ github.run_id }}
        path: |
          openwrt/bin/targets/ramips/mt7621/
          openwrt/bin/unified_repo/
          openwrt/build.log
          openwrt/.config
