#
# =================================================================
# GitHub Actions: 为你的 K2P 编译固件 (终极修正版)
# 结合了能被识别的结构和正确的命令
# =================================================================
#
name: Build My K2P Firmware (Final Corrected)

on:
  workflow_dispatch:

env:
  # .config 文件名 (已修正语法)
  CONFIG_FILE: .config
  # 上传固arameters
  UPLOAD_FIRMWARE: true
  # 时区
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      # 步骤 1: 检出你自己的、修改过的分支
      - name: Checkout My k2p-mod-24.10 Branch
        uses: actions/checkout@v4
        with:
          # 使用你自己的仓库
          repository: ${{ github.repository }}
          # 明确指定你的工作分支
          ref: k2p-mod-24.10

      # 步骤 2: 初始化编译环境 (来自你的工作版本)
      - name: Initialize build environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      # 步骤 3: 更新 Feeds 并应用你的配置 (关键修正)
      - name: Update feeds and apply custom config
        run: |
          # 因为已经 checkout 了你的仓库, 无需 cd
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 复制你的 .config 文件 (已修正命令)
          cp -f $CONFIG_FILE .config
          # 拉取第三方软件包源码 (例如 OpenClash)
          git clone --depth=1 https://github.com/vernesong/luci-app-openclash.git package/luci-app-openclash
          
      # 步骤 4: 下载源码 (移除了 make defconfig)
      - name: Download package sources
        run: |
          make download -j$(nproc)

      # 步骤 5: 编译固件
      - name: Build the firmware
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) V=s

      # 步骤 6: 打包固件 (已修正路径和命令)
      - name: Package firmware
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          FIRMWARE_PATH="bin/targets/ramips/mt7621"
          cd $FIRMWARE_PATH
          rm -rf packages
          echo "FIRMWARE_TAG=$(date +'%Y.%m.%d-%H%M')-K2P-MOD" >> $GITHUB_ENV
          zip -r immortalwrt-k2p-${{ env.FIRMWARE_TAG }}.zip .

      # 步骤 7: 上传固件 (已修正路径和命令)
      - name: Upload firmware artifact
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-k2p-${{ env.FIRMWARE_TAG }}
          path: bin/targets/ramips/mt7621/*.zip
