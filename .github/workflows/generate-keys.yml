# .github/workflows/generate-keys.yml

# 工作流名称
name: 'Generate ImmortalWrt Signing Keys (Corrected Syntax)'

# 触发条件：允许从 GitHub Actions 页面手动触发
on:
  workflow_dispatch:

jobs:
  # 定义一个名为 'generate-keys' 的作业
  generate-keys:
    # 在最新的 Ubuntu 虚拟机上运行
    runs-on: ubuntu-latest

    # 为此作业中的所有 'run' 命令设置默认的工作目录
    defaults:
      run:
        working-directory: ./openwrt

    steps:
      # 步骤 1: 安装编译所需的所有依赖
      # 覆盖默认工作目录，因为此时 './openwrt' 还不存在
      # 安装 ImmortalWrt 官方 README 中推荐的完整依赖包列表
      # 这是确保所有主机工具（包括 usign）能被成功编译的关键
      - name: 'Install All Build Dependencies'
        working-directory: .
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

      # 步骤 2: 克隆 ImmortalWrt 源码 (目标分支 openwrt-24.10)
      - name: 'Checkout ImmortalWrt Source'
        uses: actions/checkout@v4
        with:
          repository: 'immortalwrt/immortalwrt'
          ref: 'openwrt-24.10'
          path: 'openwrt'

      # 步骤 3: 准备构建环境 (非交互式构建的基础)
      - name: 'Prepare Build Environment'
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      # 步骤 4: 构建并安装工具链及所有主机工具 (关键修复)
      - name: 'Build and Install Toolchain & Host Tools'
        run: |
          make toolchain/install -j$(nproc) V=s

      # 步骤 5: 验证 usign 是否已成功安装 (防御性编程)
      - name: 'Verify usign Installation'
        run: |
          echo "Verifying if usign exists..."
          if [ -f "./staging_dir/host/bin/usign" ]; then
            echo "SUCCESS: usign found at./staging_dir/host/bin/usign"
            ls -l./staging_dir/host/bin/usign
          else
            echo "ERROR: usign not found in./staging_dir/host/bin/"
            echo "This indicates a failure in the 'toolchain/install' step."
            exit 1
          fi
          
      # 步骤 6: 创建包索引以触发密钥生成
      # 因为上一步已经确保 usign 工具存在，这一步现在可以成功执行。
      # 'make package/index' 会调用 usign，usign 发现没有密钥时会自动在 'key-build' 目录中生成。
      # 这是最符合 OpenWrt 构建逻辑的密钥生成方式。
      - name: 'Create Package Index to Trigger Key Generation'
        run: |
          make package/index V=s

      # 步骤 7: 验证生成的密钥 (用于调试和确认)
      - name: 'Verify Generated Keys'
        run: |
          echo "Verifying generated keys in 'key-build' directory..."
          if [ -d "key-build" ]; then
            echo "SUCCESS: 'key-build' directory found."
            echo "Listing contents:"
            ls -lR key-build
          else
            echo "ERROR: 'key-build' directory not found! Key generation failed."
            exit 1
          fi

      # 步骤 7: 验证生成的密钥 (用于调试和确认)
      - name: 'Verify Generated Keys'
        run: |
          echo "Verifying generated keys in 'key-build' directory..."
          if [ -f "./staging_dir/host/bin/usign" ]; then
            echo "SUCCESS: usign found at./staging_dir/host/bin/usign""
            ls -l./staging_dir/host/bin/usign
          else
            echo "ERROR: usign not found in./staging_dir/host/bin/"
            echo "This indicates a failure in the 'toolchain/install' step."
            exit 1
          fi

      # 步骤 8: 将生成的密钥目录作为产物上传
      - name: 'Upload Keys as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-signing-keys-24.10
          # 注意：这里的路径是相对于工作空间根目录的
          path: ./openwrt/key-build/
